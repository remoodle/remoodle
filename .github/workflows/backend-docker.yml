name: "[backend] Publish Docker image"

on:
  push:
    branches: [trunk]
    paths:
      - "apps/backend/**"
      - ".github/workflows/backend-docker.yml"

  workflow_dispatch:

  workflow_call:
    inputs:
      release_version:
        description: "Release version"
        required: true
        type: "string"

env:
  IMAGE_NAME: backend
  REGISTRY: ghcr.io

permissions: write-all

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Get the latest tag
        id: latest_tag
        uses: actions/github-script@v3
        env:
          TAG_PREFIX: "remoodle/backend-"
        with:
          result-encoding: string
          script: |
            const prefix = process.env.TAG_PREFIX;
            const { data: tags } = await github.repos.listTags({
              ...context.repo,
              per_page: 100,
            });

            const foundTags = tags.filter(({name}) => name.startsWith(prefix))
            const latestTag = foundTags[0] && foundTags[0].name;

            return latestTag ? latestTag.slice(prefix.length) : "";

      - name: Build image
        env:
          RELEASE_VERSION: ${{ inputs.release_version }}
        run: |
          IMAGE_ID=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          SHORT_SHA=${{ github.sha }} | cut -c1-8

          if [[ -n "${RELEASE_VERSION}" ]]; then
            DOCKER_TAG="release-v${RELEASE_VERSION}.${SHORT_SHA}"
          else
            VERSION=$(echo "${{ github.ref }}" | sed -e 's/[\/-]/_/g')
            LATEST_TAG=${{ steps.latest_tag.outputs.result }}
            DOCKER_TAG="${LATEST_TAG}.${SHORT_SHA}.${VERSION}"
          fi

          echo IMAGE_ID=$IMAGE_ID
          echo DOCKER_TAG=$DOCKER_TAG

          docker build -f apps/backend/Dockerfile . --tag $IMAGE_ID:$DOCKER_TAG --build-arg VERSION_TAG=$DOCKER_TAG

          docker push $IMAGE_ID:$DOCKER_TAG
